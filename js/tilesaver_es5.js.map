{"version":3,"sources":["tilesaver.js"],"names":["initTileSaver","saveCanvas","save","tileRenderer","tileScene","tileCamera","NUM_TILES","_renderer","_scene","_camera","_tiles","canvas","filename","Promise","toBlob","url","URL","createObjectURL","blob","link","document","createElement","download","href","click","revokeObjectURL","resolve","num_tiles","undefined","console","warn","timestamp","Date","toISOString","tileWidth","domElement","width","tileHeight","height","fullWidth","fullHeight","log","targetCanvas","targetContext","getContext","ty","tx","offsetX","offsetY","setViewOffset","render","drawImage","clearViewOffset"],"mappings":";;;;;QAIgBA,a,GAAAA,a;QAQAC,U,GAAAA,U;QAeAC,I,GAAAA,I;AA3BhB,IAAIC,qBAAJ;AAAA,IAAkBC,kBAAlB;AAAA,IAA6BC,mBAA7B;AACA,IAAIC,YAAY,CAAhB;;AAGO,SAASN,aAAT,CAAuBO,SAAvB,EAAkCC,MAAlC,EAA0CC,OAA1C,EAAmDC,MAAnD,EAA2D;AAChEP,iBAAeI,SAAf;AACAH,cAAYI,MAAZ;AACAH,eAAaI,OAAb;AACA,MAAIC,SAAS,CAAb,EAAgBJ,YAAYI,MAAZ;AACjB;;AAGM,SAAST,UAAT,CAAoBU,MAApB,EAA4BC,QAA5B,EAAsC;AAC3C,SAAO,IAAIC,OAAJ,CAAY,mBAAW;AAC5BF,WAAOG,MAAP,CAAc,gBAAQ;AACpB,UAAIC,MAAMC,IAAIC,eAAJ,CAAoBC,IAApB,CAAV;AACA,UAAIC,OAAOC,SAASC,aAAT,CAAuB,GAAvB,CAAX;AACAF,WAAKG,QAAL,GAAgBV,QAAhB;AACAO,WAAKI,IAAL,GAAYR,GAAZ;AACAI,WAAKK,KAAL;AACAR,UAAIS,eAAJ,CAAoBV,GAApB;AACAW,cAAQd,QAAR;AACD,KARD;AASD,GAVM,CAAP;AAWD;;AAGM,SAASV,IAAT,CAAcyB,SAAd,EAAyB;AAC9B;;AAEAA,cAAYA,cAAcC,SAAd,GAA0BD,SAA1B,GAAsCrB,SAAlD;;AAEA,MAAI,CAACH,YAAD,IAAiB,CAACC,SAAlB,IAA+B,CAACC,UAApC,EAAgD;AAC9CwB,YAAQC,IAAR,CAAa,mEAAb;AACA;AACD;;AAED,MAAIH,YAAY,CAAhB,EAAmB;AACjBE,YAAQC,IAAR,CAAa,4CAAb;AACA;AACD;;AAED,MAAIC,YAAa,IAAIC,IAAJ,GAAWC,WAAX,EAAjB;AACA,MAAIC,YAAa/B,aAAagC,UAAb,CAAwBC,KAAzC;AACA,MAAIC,aAAalC,aAAagC,UAAb,CAAwBG,MAAzC;AACA,MAAIC,YAAaL,YAAaP,SAA9B;AACA,MAAIa,aAAaH,aAAaV,SAA9B;AACAE,UAAQY,GAAR,CAAYP,SAAZ,EAAuBG,UAAvB,EAAmCE,SAAnC,EAA8CC,UAA9C;;AAEA,MAAIE,eAAetB,SAASC,aAAT,CAAuB,QAAvB,CAAnB;AACAqB,eAAaN,KAAb,GAAqBG,SAArB;AACAG,eAAaJ,MAAb,GAAsBE,UAAtB;AACA,MAAIG,gBAAgBD,aAAaE,UAAb,CAAwB,IAAxB,CAApB;;AAEA,OAAK,IAAIC,KAAG,CAAZ,EAAeA,KAAGlB,SAAlB,EAA6BkB,IAA7B,EAAmC;AACjC,SAAK,IAAIC,KAAG,CAAZ,EAAeA,KAAGnB,SAAlB,EAA6BmB,IAA7B,EAAmC;AACjC,UAAIC,UAAUD,KAAKZ,SAAnB;AACA,UAAIc,UAAUH,KAAKR,UAAnB;AACAhC,iBAAW4C,aAAX,CAA0BV,SAA1B,EAAqCC,UAArC,EAAiDO,OAAjD,EAA0DC,OAA1D,EAAmEd,SAAnE,EAA8EG,UAA9E;AACAlC,mBAAa+C,MAAb,CAAqB9C,SAArB,EAAgCC,UAAhC;AACA;AACAsC,oBAAcQ,SAAd,CAAwBhD,aAAagC,UAArC,EAAiDY,OAAjD,EAA0DC,OAA1D;AACD;AACF;;AAED3C,aAAW+C,eAAX;AACA,SAAOnD,WAAWyC,YAAX,EAA4BX,SAA5B,SAAyCQ,SAAzC,SAAsDC,UAAtD,UAAP;AACD","file":"tilesaver_es5.js","sourcesContent":["let tileRenderer, tileScene, tileCamera;\nlet NUM_TILES = 2;\n\n\nexport function initTileSaver(_renderer, _scene, _camera, _tiles) {\n  tileRenderer = _renderer;\n  tileScene = _scene;\n  tileCamera = _camera;\n  if (_tiles > 0) NUM_TILES = _tiles;\n}\n\n\nexport function saveCanvas(canvas, filename) {\n  return new Promise(resolve => {\n    canvas.toBlob(blob => {\n      let url = URL.createObjectURL(blob);\n      let link = document.createElement('a');\n      link.download = filename;\n      link.href = url;\n      link.click();\n      URL.revokeObjectURL(url);\n      resolve(filename);\n    });\n  });\n}\n\n\nexport function save(num_tiles) {\n  // assume rendering is halted\n  \n  num_tiles = num_tiles !== undefined ? num_tiles : NUM_TILES;\n  \n  if (!tileRenderer || !tileScene || !tileCamera) {\n    console.warn('tilesaver: Please use init() to set up renderer, scene and camera');\n    return;\n  }\n  \n  if (num_tiles < 1) {\n    console.warn('tilesaver: number of tiles needs to be > 0');\n    return;\n  }\n  \n  let timestamp  = new Date().toISOString();\n  let tileWidth  = tileRenderer.domElement.width;\n  let tileHeight = tileRenderer.domElement.height;\n  let fullWidth  = tileWidth  * num_tiles;\n  let fullHeight = tileHeight * num_tiles;\n  console.log(tileWidth, tileHeight, fullWidth, fullHeight);\n  \n  let targetCanvas = document.createElement(\"canvas\");\n  targetCanvas.width = fullWidth;\n  targetCanvas.height = fullHeight;\n  let targetContext = targetCanvas.getContext(\"2d\");\n  \n  for (let ty=0; ty<num_tiles; ty++) {\n    for (let tx=0; tx<num_tiles; tx++) {\n      let offsetX = tx * tileWidth;\n      let offsetY = ty * tileHeight;\n      tileCamera.setViewOffset( fullWidth, fullHeight, offsetX, offsetY, tileWidth, tileHeight );\n      tileRenderer.render( tileScene, tileCamera );\n      // save current tile\n      targetContext.drawImage(tileRenderer.domElement, offsetX, offsetY);\n    }\n  }\n  \n  tileCamera.clearViewOffset();\n  return saveCanvas(targetCanvas, `${timestamp}_${fullWidth}x${fullHeight}.png`);\n}\n"]}