function Neuron(a,b,c){this.connection=[],this.receivedSignal=!1,this.lastSignalRelease=0,this.releaseDelay=0,this.fired=!1,this.firedCount=0,this.prevReleaseAxon=null,THREE.Vector3.call(this,a,b,c)}function Signal(a,b,c){this.minSpeed=b,this.maxSpeed=c,this.speed=THREE.Math.randFloat(this.minSpeed,this.maxSpeed),this.alive=!0,this.t=null,this.startingPoint=null,this.axon=null,this.particle=a.getParticle(),THREE.Vector3.call(this),this.trailRenderer=new THREE.TrailRenderer(scene,!0);var d=THREE.TrailRenderer.createBaseMaterial(),e=new THREE.Color(this.particle.pColor);d.uniforms.headColor.value.set(e.r,e.g,e.b,.8),d.uniforms.tailColor.value.set(e.r,e.g,e.b,.1);for(var f=20,g=[],h=0;h<circlePoints.length;h++)g.push(circlePoints[h].clone().multiplyScalar(neuralNet.settings.trailSizeMult));var i=new THREE.Geometry;i.vertices.push(this.particle),this.mesh=new THREE.Mesh(i),this.trailRenderer.initialize(d,f,!1,0,g,this.mesh),this.trailRenderer.activate()}function ParticlePool(a){this.spriteTextureSignal=TEXTURES.electric,this.poolSize=a,this.pGeom=new THREE.Geometry,this.particles=this.pGeom.vertices,this.offScreenPos=new THREE.Vector3(9999,9999,9999),this.pColor="#ffffff",this.pSize=.6;for(var b=0;b<this.poolSize;b++)this.particles[b]=new Particle(this);this.meshComponents=new THREE.Object3D,this.pMat=new THREE.PointsMaterial({map:this.spriteTextureSignal,size:this.pSize,color:this.pColor,blending:THREE.AdditiveBlending,depthTest:!1,transparent:!0}),this.pMesh=new THREE.Points(this.pGeom,this.pMat),this.pMesh.frustumCulled=!1,this.meshComponents.add(this.pMesh),this.pMat_outer=this.pMat.clone(),this.pMat_outer.size=10*this.pSize,this.pMat_outer.opacity=.04,this.pMesh_outer=new THREE.Points(this.pGeom,this.pMat_outer),this.pMesh_outer.frustumCulled=!1,this.meshComponents.add(this.pMesh_outer)}function Particle(a){this.particlePool=a,this.available=!0,THREE.Vector3.call(this,this.particlePool.offScreenPos.x,this.particlePool.offScreenPos.y,this.particlePool.offScreenPos.z)}function Axon(a,b){this.bezierSubdivision=1,this.neuronA=a,this.neuronB=b,THREE.LineCurve3.call(this,this.neuronA,this.neuronB),this.vertices=this.getSubdividedVertices()}function Connection(a,b){this.axon=a,this.startingPoint=b}function NeuralNetwork(){this.initialized=!1,this.settings={verticesSkipStep:1,maxAxonDist:30,axonThickness:2,maxConnectionsPerNeuron:6,amountEmittedSignals:2,signalMinSpeed:.5,signalMaxSpeed:.8,currentMaxSignals:3e3,limitSignals:1e4,maxNeurons:3e3,neuroSeed:1e3,noiseFreq:15,trailSizeMult:1},this.createNetwork()}function updateHelpers(){}function main(){window.neuralNet=new NeuralNetwork;initGui(),run()}function initGui(){gui=new dat.GUI,gui.width=270,gui_info=gui.addFolder("Info"),gui_info.add(neuralNet,"numNeurons").name("Neurons"),gui_info.add(neuralNet,"numAxons").name("Axons"),gui_info.add(neuralNet,"numSignals",0,neuralNet.settings.limitSignals).name("Signals"),gui_info.autoListen=!1,gui_settings=gui.addFolder("Settings Signals "),gui_settings.add(neuralNet.settings,"currentMaxSignals",0,neuralNet.settings.limitSignals).name("Max Signals"),gui_settings.add(neuralNet.particlePool,"pSize",.2,2).name("Signal Size"),gui_settings.add(neuralNet.settings,"amountEmittedSignals",1,200).name("Amount Emitted Signals"),gui_settings.add(neuralNet.settings,"signalMinSpeed",0,8,.01).name("Signal Min Speed"),gui_settings.add(neuralNet.settings,"signalMaxSpeed",0,8,.01).name("Signal Max Speed"),gui_settings.addColor(neuralNet.particlePool,"pColor").name("Signal Color"),gui_settings.add(neuralNet.settings,"trailSizeMult",0,10,.01).name("Trail Size Mult"),gui_settings.addColor(sceneSettings,"bgColor").name("Background"),gui_settings.add(neuralNet,"releaseSignal").name("Release Signal"),gui_settings.open();for(var a=0;a<gui_settings.__controllers.length;a++)gui_settings.__controllers[a].onChange(updateNeuralNetworkSettings);gui_settings=gui.addFolder("Settings Connections "),gui_settings.add(neuralNet.settings,"maxAxonDist",0,100).name("Max Distance"),gui_settings.add(neuralNet.settings,"axonThickness",0,100).name("Axon Thickness"),gui_settings.add(neuralNet.settings,"maxConnectionsPerNeuron",0,100).name("Max Connection Per Neuron").step(1),gui_settings.add(neuralNet,"axonOpacityMultiplier",0,10).name("Axon Opacity Mult"),gui_settings.addColor(neuralNet,"axonColor").name("Axon Color"),gui_settings.open();for(var a=0;a<gui_settings.__controllers.length;a++)gui_settings.__controllers[a].onChange(updateNeuralNetworkSettings);gui_settings=gui.addFolder("Settings Neurons"),gui_settings.add(neuralNet.settings,"maxNeurons",0,1e4).name("Max Neurons").step(1),gui_settings.add(neuralNet.settings,"neuroSeed",0,1e3).name("Neuro Seed").step(1),gui_settings.add(neuralNet.settings,"noiseFreq",0,100).name("Noise Frequency").step(.1),gui_settings.add(neuralNet,"neuronSizeMultiplier",0,2).name("Neuron Size Mult"),gui_settings.add(neuralNet,"neuronOpacity",0,1).name("Neuron Opacity"),gui_settings.addColor(neuralNet,"neuronColor").name("Neuron Color"),gui_settings.add(neuralNet,"createNetwork").name("Create Network"),gui_info.open(),gui_settings.open();for(var a=0;a<gui_settings.__controllers.length;a++)gui_settings.__controllers[a].onChange(updateNeuralNetworkSettings)}function updateNeuralNetworkSettings(){neuralNet.updateSettings(),neuralNet.settings.signalMinSpeed>neuralNet.settings.signalMaxSpeed&&(neuralNet.settings.signalMaxSpeed=neuralNet.settings.signalMinSpeed,gui_settings.__controllers[3].updateDisplay())}function updateGuiInfo(){for(var a=0;a<gui_info.__controllers.length;a++)gui_info.__controllers[a].updateDisplay()}function update(){if(updateHelpers(),!sceneSettings.pause){var a=clock.getDelta();neuralNet.update(a),updateGuiInfo()}}function run(){requestAnimationFrame(run),update(),do_render&&(renderer.setClearColor(sceneSettings.bgColor,1),renderer.render(scene,camera)),stats.update(),FRAME_COUNT++}function onWindowResize(){WIDTH=window.innerWidth,HEIGHT=window.innerHeight,pixelRatio=window.devicePixelRatio||1,screenRatio=WIDTH/HEIGHT,camera.aspect=screenRatio,camera.updateProjectionMatrix(),renderer.setSize(WIDTH,HEIGHT),renderer.setPixelRatio(pixelRatio)}function saveTiles(a,b,c,d){var e=a,f=b,g=c,h=d;if(h=void 0!==h?h:2,!e||!f||!g)return void console.warn("tilesaver: Please use init() to set up renderer, scene and camera");if(h<1)return void console.warn("tilesaver: number of tiles needs to be > 0");var i=((new Date).toISOString(),e.domElement.width),j=e.domElement.height,k=i*h,l=j*h;console.log(i,j,k,l);var m=document.createElement("canvas");m.width=k,m.height=l;for(var n=m.getContext("2d"),o=0;o<h;o++)for(var p=0;p<h;p++){var q=p*i,r=o*j;g.setViewOffset(k,l,q,r,i,j),e.render(f,g),n.drawImage(e.domElement,q,r)}g.clearViewOffset(),filename=m;var s=(m.toDataURL("image/png"),document.createElement("a"));s.download=filename,s.href=url,s.click(),URL.revokeObjectURL(url)}!function(a){"use strict";var b=a.HTMLCanvasElement&&a.HTMLCanvasElement.prototype,c=a.Blob&&function(){try{return Boolean(new Blob)}catch(a){return!1}}(),d=c&&a.Uint8Array&&function(){try{return 100===new Blob([new Uint8Array(100)]).size}catch(a){return!1}}(),e=a.BlobBuilder||a.WebKitBlobBuilder||a.MozBlobBuilder||a.MSBlobBuilder,f=/^data:((.*?)(;charset=.*?)?)(;base64)?,/,g=(c||e)&&a.atob&&a.ArrayBuffer&&a.Uint8Array&&function(a){var b,g,h,i,j,k,l,m,n;if(!(b=a.match(f)))throw new Error("invalid data URI");for(g=b[2]?b[1]:"text/plain"+(b[3]||";charset=US-ASCII"),h=!!b[4],i=a.slice(b[0].length),j=h?atob(i):decodeURIComponent(i),k=new ArrayBuffer(j.length),l=new Uint8Array(k),m=0;m<j.length;m+=1)l[m]=j.charCodeAt(m);return c?new Blob([d?l:k],{type:g}):((n=new e).append(k),n.getBlob(g))};a.HTMLCanvasElement&&!b.toBlob&&(b.mozGetAsFile?b.toBlob=function(a,c,d){var e=this;setTimeout(function(){a(d&&b.toDataURL&&g?g(e.toDataURL(c,d)):e.mozGetAsFile("blob",c))})}:b.toDataURL&&g&&(b.toBlob=function(a,b,c){var d=this;setTimeout(function(){a(g(d.toDataURL(b,c)))})})),"function"==typeof define&&define.amd?define(function(){return g}):"object"==typeof module&&module.exports?module.exports=g:a.dataURLtoBlob=g}(window),Neuron.prototype=Object.create(THREE.Vector3.prototype),Neuron.prototype.connectNeuronTo=function(a){var b=this,c=new Axon(b,a);return b.connection.push(new Connection(c,"A")),a.connection.push(new Connection(c,"B")),c},Neuron.prototype.createSignal=function(a,b,c){this.receivedSignal=!1;for(var d=[],e=0;e<this.connection.length;e++)if(this.connection[e].axon!==this.prevReleaseAxon)if(this.equals(window.neuralNet.initialReleasePosition)){var f=new Signal(a,b,c);f.setConnection(this.connection[e]),d.push(f),this.firedCount+=1}else{pos=this.connection[e].axon.getPoint(.5).clone();var g=pos.sub(this),h=(new THREE.Vector3).subVectors(this,window.neuralNet.initialReleasePosition),i=h.angleTo(g);if(i<Math.PI/2){var f=new Signal(a,b,c);f.setConnection(this.connection[e]),d.push(f),this.firedCount+=1}}return d},Neuron.prototype.reset=function(){this.receivedSignal=!1,this.lastSignalRelease=0,this.releaseDelay=0,this.fired=!1,this.firedCount=0},Signal.prototype=Object.create(THREE.Vector3.prototype),Signal.prototype.setConnection=function(a){this.startingPoint=a.startingPoint,this.axon=a.axon,"A"===this.startingPoint?this.t=0:"B"===this.startingPoint&&(this.t=1)},Signal.prototype.travel=function(a){var b;"A"===this.startingPoint?(this.t+=this.speed*a,this.t>=1&&(this.t=1,this.alive=!1,this.axon.neuronB.receivedSignal=!0,this.axon.neuronB.prevReleaseAxon=this.axon,this.trailRenderer.deactivate())):"B"===this.startingPoint&&(this.t-=this.speed*a,this.t<=0&&(this.t=0,this.alive=!1,this.axon.neuronA.receivedSignal=!0,this.axon.neuronA.prevReleaseAxon=this.axon,this.trailRenderer.deactivate())),b=this.axon.getPoint(this.t),this.particle.set(b.x,b.y,b.z),this.mesh.position.set(b.x,b.y,b.z),this.mesh.updateMatrixWorld(),this.trailRenderer.advance(),this.trailRenderer.updateHead()},ParticlePool.prototype.getAvgExecutionTime=function(){return this.profTime/this.itt},ParticlePool.prototype.getParticle=function(){for(var a=0;a<this.poolSize;a++){var b=this.particles[a];if(b.available)return this.lastAvailableIdx=a,b.available=!1,b}return console.error("ParticlePool.prototype.getParticle return null"),null},ParticlePool.prototype.update=function(){this.pGeom.verticesNeedUpdate=!0},ParticlePool.prototype.updateSettings=function(){this.pMat.color.setStyle(this.pColor),this.pMat.size=this.pSize,this.pMat_outer.color.setStyle(this.pColor),this.pMat_outer.size=10*this.pSize},Particle.prototype=Object.create(THREE.Vector3.prototype),Particle.prototype.free=function(){this.available=!0,this.set(this.particlePool.offScreenPos.x,this.particlePool.offScreenPos.y,this.particlePool.offScreenPos.z)},Axon.prototype=Object.create(THREE.LineCurve3.prototype),Axon.prototype.getSubdividedVertices=function(){return this.getSpacedPoints(this.bezierSubdivision)},NeuralNetwork.prototype.createNetwork=function(){this.initialized=!1,this.meshComponents&&scene.remove(this.meshComponents),this.meshComponents=new THREE.Object3D,this.trailComponets=new THREE.Object3D,this.particlePool=new ParticlePool(this.settings.limitSignals),this.meshComponents.add(this.particlePool.meshComponents),this.components={neurons:[],allSignals:[],allAxons:[]},this.axonOpacityMultiplier=.5,this.axonColor="#ffffff",this.axonGeom=new THREE.BufferGeometry,this.axonPositions=[],this.axonIndices=[],this.axonNextPositionsIndex=0,this.axonUniforms={color:{type:"c",value:new THREE.Color(this.axonColor)},opacityMultiplier:{type:"f",value:this.axonOpacityMultiplier}},this.axonAttributes={opacity:{type:"f",value:[]}},this.neuronSizeMultiplier=1,this.spriteTextureNeuron=TEXTURES.electric,this.neuronColor="#ffffff",this.neuronOpacity=.75,this.neuronsGeom=new THREE.BufferGeometry,this.neuronUniforms={sizeMultiplier:{type:"f",value:this.neuronSizeMultiplier},opacity:{type:"f",value:this.neuronOpacity},texture:{type:"t",value:this.spriteTextureNeuron}},this.neuronShaderMaterial=new THREE.ShaderMaterial({uniforms:this.neuronUniforms,vertexShader:null,fragmentShader:null,blending:THREE.AdditiveBlending,transparent:!0,depthTest:!1}),this.initialReleasePosition=new THREE.Vector3,this.numNeurons=0,this.numAxons=0,this.numSignals=0,this.numPassive=0,this.initNeuralNetwork(),sceneTrail.add(this.trailComponets),scene.add(this.meshComponents)},NeuralNetwork.prototype.createVertices=function(){var a=new Array(this.settings.maxNeurons),b=0;noise.seed(this.settings.neuroSeed);for(var c=100,d=100,e=20,f=0,g=0;b<this.settings.maxNeurons;)xRandom=Math.random(),yRandom=Math.random(),zRandom=Math.random(),f=Math.abs(noise.perlin3(xRandom*this.settings.noiseFreq,yRandom*this.settings.noiseFreq,zRandom*this.settings.noiseFreq)),f>.95-g/1e7?(xPos=(.5-xRandom)*c,yPos=(.5-yRandom)*d,zPos=(.5-zRandom)*e,a[b]=new THREE.Vector3(xPos,yPos,zPos),b++):g++;return a},NeuralNetwork.prototype.initNeuralNetwork=function(){vertice=this.createVertices(),this.initNeurons(vertice),this.initAxons(),this.neuronShaderMaterial.vertexShader=SHADER_CONTAINER.neuronVert,this.neuronShaderMaterial.fragmentShader=SHADER_CONTAINER.neuronFrag,this.axonShaderMaterial.vertexShader=SHADER_CONTAINER.axonVert,this.axonShaderMaterial.fragmentShader=SHADER_CONTAINER.axonFrag,this.initialized=!0},NeuralNetwork.prototype.initNeurons=function(a){var b,c=[],d=[],e=[],f=new THREE.Color("#ffffff");for(b=0;b<a.length;b++){var g=a[b],h=new Neuron(g.x,g.y,g.z);this.components.neurons.push(h),c.push(g.x,g.y,g.z),d.push(f.r,f.g,f.b),e.push(THREE.Math.randFloat(.75,3))}this.neuronsGeom.addAttribute("position",new THREE.Float32BufferAttribute(c,3)),this.neuronsGeom.addAttribute("color",new THREE.Float32BufferAttribute(d,3).setDynamic(!0)),this.neuronsGeom.addAttribute("size",new THREE.Float32BufferAttribute(e,1).setDynamic(!0)),this.neuronParticles=new THREE.Points(this.neuronsGeom,this.neuronShaderMaterial),this.meshComponents.add(this.neuronParticles),this.neuronShaderMaterial.needsUpdate=!0},NeuralNetwork.prototype.initAxons=function(){for(var a=this.components.neurons.length,b=0;b<a;b++)for(var c=this.components.neurons[b],d=b+1;d<a;d++){var e=this.components.neurons[d];if(c!==e&&c.distanceTo(e)<this.settings.maxAxonDist&&c.connection.length<this.settings.maxConnectionsPerNeuron&&e.connection.length<this.settings.maxConnectionsPerNeuron){var f=c.connectNeuronTo(e);this.constructAxonArrayBuffer(f)}}renderer.getContext().getExtension("OES_element_index_uint")||console.error("32bit index buffer not supported!");var g=new Uint32Array(this.axonIndices),h=new Float32Array(this.axonPositions),j=new Float32Array(this.axonAttributes.opacity.value);this.axonGeom.setIndex(new THREE.BufferAttribute(g,1)),this.axonGeom.addAttribute("position",new THREE.BufferAttribute(h,3)),this.axonGeom.addAttribute("opacity",new THREE.BufferAttribute(j,1)),this.axonGeom.computeBoundingSphere(),this.axonShaderMaterial=new THREE.ShaderMaterial({uniforms:this.axonUniforms,vertexShader:null,fragmentShader:null,blending:THREE.AdditiveBlending,depthTest:!1,transparent:!0,linewidth:this.settings.axonThickness}),this.axonMesh=new THREE.LineSegments(this.axonGeom,this.axonShaderMaterial),this.meshComponents.add(this.axonMesh);var k=0;for(i=0;i<a;i++)this.components.neurons[i].connection[0]||(k+=1);console.log("numNotConnected =",k)},NeuralNetwork.prototype.releaseSignal=function(a){this.resetAllNeurons(),selectedNeuron=this.components.neurons[THREE.Math.randInt(0,this.components.neurons.length)],this.initialReleasePosition=selectedNeuron;for(var b=0;b<this.settings.amountEmittedSignals;b++)this.releaseSignalAt(selectedNeuron)},NeuralNetwork.prototype.update=function(a){if(this.initialized){var b,c,d=Date.now();for(c=0;c<this.components.neurons.length;c++)b=this.components.neurons[c],this.components.allSignals.length<this.settings.currentMaxSignals-this.settings.maxConnectionsPerNeuron&&b.receivedSignal&&b.firedCount<8&&(b.fired=!0,b.lastSignalRelease=d,b.releaseDelay=THREE.Math.randInt(100,1e3),this.releaseSignalAt(b)),b.receivedSignal=!1;for(var e=this.components.allSignals.length-1;e>=0;e--){var f=this.components.allSignals[e];if(f.travel(a),!f.alive){f.particle.free();for(var g=this.components.allSignals.length-1;g>=0;g--)if(f===this.components.allSignals[g]){this.components.allSignals.splice(g,1);break}}}this.particlePool.update(),this.updateInfo()}},NeuralNetwork.prototype.constructAxonArrayBuffer=function(a){this.components.allAxons.push(a);for(var b=a.vertices,c=0;c<b.length;c++){if(this.axonPositions.push(b[c].x,b[c].y,b[c].z),c<b.length-1){var d=this.axonNextPositionsIndex;this.axonIndices.push(d,d+1);var e=THREE.Math.randFloat(.005,.2);this.axonAttributes.opacity.value.push(e,e)}this.axonNextPositionsIndex+=1}},NeuralNetwork.prototype.releaseSignalAt=function(a){for(var b=a.createSignal(this.particlePool,this.settings.signalMinSpeed,this.settings.signalMaxSpeed),c=0;c<b.length;c++){var d=b[c];this.components.allSignals.push(d)}},NeuralNetwork.prototype.resetAllNeurons=function(){this.numPassive=0;for(var a=0;a<this.components.neurons.length;a++)n=this.components.neurons[a],n.fired||(this.numPassive+=1),n.reset()},NeuralNetwork.prototype.updateInfo=function(){this.numNeurons=this.components.neurons.length,this.numAxons=this.components.allAxons.length,this.numSignals=this.components.allSignals.length},NeuralNetwork.prototype.updateSettings=function(){this.neuronUniforms.opacity.value=this.neuronOpacity;var a=new THREE.Color(this.neuronColor),b=this.neuronsGeom.attributes.color.array;for(i=0;i<b.length;i+=3)b[i]=a.r,b[i+1]=a.g,b[i+2]=a.b;this.neuronsGeom.attributes.color.needsUpdate=!0,this.neuronUniforms.sizeMultiplier.value=this.neuronSizeMultiplier,this.axonUniforms.color.value.set(this.axonColor),this.axonUniforms.opacityMultiplier.value=this.axonOpacityMultiplier,this.axonShaderMaterial.linewidth=this.settings.axonThickness,this.particlePool.updateSettings()},NeuralNetwork.prototype.testChangOpcAttr=function(){for(var a=this.axonGeom.attributes.opacity.array,b=0;b<a.length;b++)a[b]=THREE.Math.randFloat(0,.5);this.axonGeom.attributes.opacity.needsUpdate=!0};var loadingManager=new THREE.LoadingManager;loadingManager.onLoad=function(){document.getElementById("loading").style.display="none",console.log("Done."),main()},loadingManager.onProgress=function(a,b,c){console.log(b+"/"+c,a)};var shaderLoader=new THREE.XHRLoader(loadingManager);shaderLoader.setResponseType("text"),shaderLoader.loadMultiple=function(a,b){_.each(b,function(b,c){shaderLoader.load(b,function(b){a[c]=b})})};var SHADER_CONTAINER={};shaderLoader.loadMultiple(SHADER_CONTAINER,{neuronVert:"shaders/neuron.vert",neuronFrag:"shaders/neuron.frag",axonVert:"shaders/axon.vert",axonFrag:"shaders/axon.frag"});var TEXTURES={},textureLoader=new THREE.TextureLoader(loadingManager);textureLoader.load("sprites/electric.png",function(a){TEXTURES.electric=a}),Detector.webgl||Detector.addGetWebGLMessage();var container,stats,scene,light,camera,cameraCtrl,renderer,renderTarget,sceneTrail,WIDTH=window.innerWidth,HEIGHT=window.innerHeight,pixelRatio=window.devicePixelRatio||1,screenRatio=WIDTH/HEIGHT,clock=new THREE.Clock,FRAME_COUNT=0,sceneSettings={pause:!1,bgColor:1118483,trailClearColor:1118483,enableGridHelper:!1,enableAxisHelper:!1};container=document.getElementById("canvas-container"),scene=new THREE.Scene,sceneTrail=new THREE.Scene,sceneScreen=new THREE.Scene,camera=new THREE.PerspectiveCamera(75,screenRatio,10,5e3),cameraCtrl=new THREE.OrbitControls(camera,container),cameraCtrl.object.position.z=150,cameraCtrl.update(),renderer=new THREE.WebGLRenderer({antialias:!0,alpha:!0,preserveDrawingBuffer:!0}),renderer.setSize(WIDTH,HEIGHT),renderer.setPixelRatio(pixelRatio),renderer.setClearColor(sceneSettings.bgColor,1),container.appendChild(renderer.domElement),stats=new Stats,container.appendChild(stats.domElement),circlePoints=[];for(var twoPI=2*Math.PI,index=0,scale=.1,inc=twoPI/16,i=0;i<=twoPI+inc;i+=inc){var vector=new THREE.Vector3;vector.set(0,Math.cos(i)*scale,Math.sin(i)*scale),circlePoints[index]=vector,index++}do_render=!0,TILES=2,document.addEventListener("keydown",function(a){" "==a.key?(console.log("space"),do_render=!do_render):"e"==a.key&&saveTiles(renderer,scene,camera,TILES)});var gui,gui_info,gui_settings;window.addEventListener("keypress",function(a){switch(a.keyCode){case 32:sceneSettings.pause=!sceneSettings.pause;break;case 65:case 97:sceneSettings.enableGridHelper=!sceneSettings.enableGridHelper;break;case 83:case 115:sceneSettings.enableAxisHelper=!sceneSettings.enableAxisHelper}}),$(function(){var a;$(window).resize(function(){clearTimeout(a),a=setTimeout(function(){onWindowResize()},250)})});